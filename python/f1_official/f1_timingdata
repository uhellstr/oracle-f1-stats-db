#!/usr/bin/env python

r"""
 _____ _
|  ___/ |
| |_  | |
|  _| | |
|_|   |_| official timing data for practice,qualification and races


This python script will use the official F1 api that gives lots of
additional information to complement the ergast API used in the F1 database

Thru the API this python code will download the data to cache and then
produce csv files for all timing data we have for practice,qualification and
race sessions since the start from 2018.

This data can then be used for lots of analysis.

Currently this python code supports

Use the F1 fast API and from the generated cache create csv files for
laptimes from practice,quali and races.

Todo: Add weather data and maybe some other info like speed and gear
that the F1 racecars uses during there sessions.

Depend on oraclepackage.py

Note: You cannot use this data for commercial usage and apps.
You can use it for your own personal analysis!!

Ulf Hellstrom oraminute@gmail.com 2022-

Before running this package:
----------------------------

Make sure you have Oracle instant client installed and can
connect to the F1 Oracle database.

Make sure you have installed the cx_Oracle module for python and it is working.

Make sure you install the fastf1,pandas,requests packages with pip or conda!

create a directory called cache in the same directory where you put this code.

copy the subdiretory oraclepackage and it's content to the same
directory as f1_timingdata.
"""

import re
from datetime import datetime
import sys
import getpass
import base64
import os
import time
import fastf1 as ff1

# Import oraclepackage module
workingdir = os.getcwd()
orapackdir = os.path.abspath(os.path.join(os.path.dirname(__file__), "..", "")) + "/"
sys.path.append(orapackdir)
from oraclepackage import oramodule as ora


class Logger(object):
    """
    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    Logger()
    Logfunction that logs all output to screen to logfile.
    Author: Ulf Hellstrom, oraminute@gmail.com
    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    """

    def __init__(self):
        """init logfile"""
        logfile = datetime.now().strftime("f1data_%Y_%m_%d_%H_%M.log")
        self.terminal = sys.stdout
        self.log = open(logfile, "a")

    def write(self, message):
        """write to logfile"""
        self.terminal.write(message)
        self.log.write(message)

    def flush(self):
        """This flush method is needed for python 3 compatibility.
         this handles the flush command by doing nothing.
        you might want to specify some extra behavior here."""
        pass


def file_exists(file_path):
    """
    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    Author: Ulf Hellstrom, oraminute@gmail.com
    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    """

    return os.path.isfile(file_path)


def remove_file(file_path):
    """
    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    Author: Ulf Hellstrom, oraminute@gmail.com
    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    """

    try:
        os.remove(file_path)
        print(f"File {file_path} successfully deleted.")
    except OSError as error:
        print(f"Error deleting file {file_path}: {error}")


def only_empty_lines(file_path):
    """
    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    Author: Ulf Hellstrom, oraminute@gmail.com
    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    """

    with open(file_path, "r") as f:
        for line in f:
            if line.strip() != "":
                return False
    return True


def check_if_object_exists(connection):
    """
    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    check_if_object_exists()
    Check if object exists or not
    Author: Ulf Hellstrom, oraminute@gmail.com
    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    """

    retval = False

    sql_stmt = """
select count(*) as antal
from dba_objects
where owner  = 'F1_DATA'
  and  object_name = 'F1_OFFICIAL_TIMEDATA'
  and object_type = 'TABLE'
"""

    cur1 = connection.cursor()
    cur1.execute(sql_stmt)
    # convert tuple to integer
    value = int(cur1.fetchone()[0])
    if value > 0:
        retval = True
    cur1.close()

    return retval


def check_if_weather_object_exists(connection):
    """
    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
     check_if_weather_object_exists()
    Check if object exists or not
    Author: Ulf Hellstrom, oraminute@gmail.com
    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    """
    retval = False

    sql_stmt = """
select count(*) as antal
from dba_objects
where owner  = 'F1_DATA'
  and  object_name = 'F1_OFFICIAL_WEATHER'
  and object_type = 'TABLE'
"""
    cur1 = connection.cursor()
    cur1.execute(sql_stmt)
    # convert tuple to integer
    value = int(cur1.fetchone()[0])
    if value > 0:
        retval = True
    cur1.close()

    return retval


def check_if_race_exists(connection, season, race, racetype):
    """
    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    check_if_race_exists()
    Check if race exists or not
    Author: Ulf Hellstrom, oraminute@gmail.com
    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    """
    retval = False

    sql_stmt = """
select count(*) as antal
from f1_data.f1_official_timedata
where season  = :season
  and  race = :race
  and racetype = :racetype
"""
    cur1 = connection.cursor()
    cur1.execute(sql_stmt, [int(season), int(race), racetype])
    # convert tuple to integer
    value = int(cur1.fetchone()[0])
    if value > 0:
        retval = True
    cur1.close()

    if retval:
        print("....debug..... race exists do not call REST")
    else:
        print("Did not find the race in the database!")

    return retval


def check_if_weather_exists(connection, season, race, racetype):
    """
    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    check_if_weather_exists()
    Check if weather data exists or not
    Author: Ulf Hellstrom, oraminute@gmail.com
    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    """
    retval = False

    sql_stmt = """
select count(*) as antal
from f1_data.f1_official_weather
where year  = :season
  and  race = :race
  and racetype = :racetype
"""
    cur1 = connection.cursor()
    cur1.execute(sql_stmt, [int(season), int(race), racetype])
    # convert tuple to integer
    value = int(cur1.fetchone()[0])
    if value > 0:
        retval = True
    cur1.close()

    if retval:
        print("....debug..... weather data exists do not call REST")
    else:
        print("Did not find the weather data in the database!")

    return retval


def get_f1_seasons_and_races(connection):
    """
    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    Author: Ulf Hellstrom, oraminute@gmail.com
    From the F1_DATA schema in the database fetch all seasons and racedates
    minus 2 days to cover for practice and qualification.
    Note: Before 2018 there waas no extended official F1 telemetry.
    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    """
    season_list = []
    sql_stmt = """
select vfr.season
       ,vfr.round
from f1_data.v_f1_races vfr
inner join f1_data.v_f1_seasons_race_dates vfd
on (vfr.season = vfd.season and vfr.round = vfd.round)
where to_number(vfr.season) >= 2018
  and to_date(vfd.race_date,'RRRR-MM-DD')-2  <= trunc(sysdate)
order by to_number(vfr.season),to_number(vfr.round) asc
"""
    cur1 = connection.cursor()
    cur1.execute(sql_stmt)
    res = cur1.fetchall()
    for row in res:
        season = row[0]
        race = row[1]
        val = str(season) + "," + str(race)
        season_list.append(val)
    cur1.close()

    return season_list


def check_lap_already_loaded(
    connection, season, race, racetype, lapnumber, team, driver
):
    """
    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    Author: Ulf Hellstrom, oraminute@gmail.com
    Check the database if a lap in FP1,FP2 etc is already loaded into the database.
    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    """
    retval = False

    sql_stmt = """
select count(*) as antal
from f1_data.f1_official_timedata
where season  = :season
  and  race = :race
  and racetype = :racetype
  and lapnumber = :lapnumber
  and team = :team
  and driver = :driver
"""
    cur1 = connection.cursor()
    cur1.execute(
        sql_stmt, [int(season), int(race), racetype, int(lapnumber), team, driver]
    )
    # convert tuple to integer
    value = int(cur1.fetchone()[0])
    if value > 0:
        retval = True
    cur1.close()

    return retval


def check_weatherdata_already_loaded(connection, season, race, racetype, datapoint):
    """
    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    Author: Ulf Hellstrom, oraminute@gmail.com
    Check the database if a weather datapoint already exists.
    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    """
    retval = False

    sql_stmt = """
select count(*) as antal
from f1_data.f1_official_weather
where year  = :season
  and race = :race
  and racetype = :racetype
  and datapoint = :datapoint
"""
    cur1 = connection.cursor()
    cur1.execute(sql_stmt, [int(season), int(race), racetype, int(datapoint)])
    # convert tuple to integer
    value = int(cur1.fetchone()[0])
    if value > 0:
        retval = True
    cur1.close()

    return retval


def get_csv_files():
    """
    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    Author: Ulf Hellstrom, oraminute@gmail.com
    Generate a list of csv files generated from f1fast api dataframes.
    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    """
    csv_list = []
    path = workingdir

    for file in os.listdir(path):
        if file.endswith(".csv"):
            if file not in ["data.csv", "temp.csv", "middlefile.csv"]:
                csv_list.append(file)

    return csv_list


def empty_to_int(empty_val):
    """
    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    Author: Ulf Hellstrom, oraminute@gmail.com
    Converting empty values e-g '' to int is not possible so we convert null values
    that is reprenseted as '' in the csv files to a valid int 0
    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    """
    return {"": "0"}.get(empty_val.strip(), empty_val)


def empty_to_float(empty_val):
    """
    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    Author: Ulf Hellstrom, oraminute@gmail.com
    Telemtry data that is empty ends up as '', This will be invalid float
    So in case of null values as empty strings we have to handle those in
    python by convert '' to 0.0 that is a valid float value.
    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    """
    return {"": "0.0"}.get(empty_val.strip(), empty_val)


def insert_data_row(connection, line, row):
    """
    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    Author: Ulf Hellstrom, oraminute@gmail.com
    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    """
    sql_stmt = """
insert into f1_data.f1_official_timedata
values(:season
    ,:race
    ,:racetype
    ,:datapoint
    ,:time
    ,:drivernumber
    ,:laptime
    ,:lapnumber
    ,:stint
    ,:pitouttime
    ,:pitintime
    ,:sector1time
    ,:sector2time
    ,:sector3time
    ,:sector1sessiontime
    ,:sector2sessiontime
    ,:sector3sessiontime
    ,:speedi1
    ,:speedi2
    ,:speedfl
    ,:speedst
    ,:ispersonalbest
    ,:compound
    ,:tyrelife
    ,:freshtyre
    ,:lapstarttime
    ,:team
    ,:driver
    ,:trackstatus
    ,:isaccurate)
"""

    print("Trying to load row:" + str(row))

    # Split up comma separated rows into columns and cleanup/fix correct
    # datatypes and cleanup missing values.
    chunks = line.split(",")
    _season = int(empty_to_int(chunks[0]))
    _race = int(empty_to_int(chunks[1]))
    _racetype = chunks[2]
    _datapoint = int(empty_to_int(chunks[3]))
    _time = chunks[4]
    _drivernumber = int(empty_to_int(chunks[5]))
    _laptime = chunks[6]
    _lapnumber = int(float(empty_to_int(chunks[7])))
    _stint = int(float(empty_to_int(chunks[8])))
    _pitouttime = chunks[9]
    _pitintime = chunks[10]
    _sector1time = chunks[11]
    _sector2time = chunks[12]
    _sector3time = chunks[13]
    _sector1sessiontime = chunks[14]
    _sector2sessiontime = chunks[15]
    _sector3sessiontime = chunks[16]
    _speedi1 = float(empty_to_float(chunks[17]))
    _speedi2 = float(empty_to_float(chunks[18]))
    _speedfl = float(empty_to_float(chunks[19]))
    _speedst = float(empty_to_float(chunks[20]))
    _ispersonalbest = chunks[21]
    _compound = chunks[22]
    _tyrelife = float(empty_to_float(chunks[23]))
    _freshtyre = chunks[24]
    _lapstarttime = chunks[25]
    _team = chunks[26]
    _driver = chunks[27]
    _trackstatus = int(empty_to_int(chunks[28]))
    _isaccurate = chunks[29]

    # If data not already loaded into database insert the row!
    if not check_lap_already_loaded(
        connection, _season, _race, _racetype, _lapnumber, _team, _driver
    ):

        # A very few rows might have very corrupt data.. We try to pass those few lines.
        # That's why the very stupid except pass until I figure out something better.
        try:
            print("ROWDATA::::::::::::::")
            print("=====================")
            print("season:" + str(_season))
            print("race:" + str(_race))
            print("racetype:" + _racetype)
            print("datapoint:" + str(_datapoint))
            print("time:" + _time)
            print("drivernumber:" + str(_drivernumber))
            print("laptime:" + _laptime)
            print("lapnumber:" + str(_lapnumber))
            print("stint:" + str(_stint))
            print("pitouttime:" + _pitouttime)
            print("pitintime:" + _pitintime)
            print("sector1time" + _sector1time)
            print("sector2time:" + _sector2time)
            print("sector3time:" + _sector3time)
            print("sector1sessiontime:" + _sector1sessiontime)
            print("sector2sessiontime:" + _sector2sessiontime)
            print("sector3sessiontime:" + _sector3sessiontime)
            print("speedi1:" + str(_speedi1))
            print("speedi2:" + str(_speedi2))
            print("speedfl:" + str(_speedfl))
            print("speedst:" + str(_speedst))
            print("ispersonalbest:" + _ispersonalbest)
            print("compuond:" + _compound)
            print("tyrelife:" + str(_tyrelife))
            print("freshtyre:" + _freshtyre)
            print("lapstarttime:" + _lapstarttime)
            print("team:" + _team)
            print("driver:" + _driver)
            print("trackstatus:" + str(_trackstatus))
            print("isaccurate:" + _isaccurate)

            cur1 = connection.cursor()
            cur1.execute(
                sql_stmt,
                [
                    _season,
                    _race,
                    _racetype,
                    _datapoint,
                    _time,
                    _drivernumber,
                    _laptime,
                    _lapnumber,
                    _stint,
                    _pitouttime,
                    _pitintime,
                    _sector1time,
                    _sector2time,
                    _sector3time,
                    _sector1sessiontime,
                    _sector2sessiontime,
                    _sector3sessiontime,
                    _speedi1,
                    _speedi2,
                    _speedfl,
                    _speedst,
                    _ispersonalbest,
                    _compound,
                    _tyrelife,
                    _freshtyre,
                    _lapstarttime,
                    _team,
                    _driver,
                    _trackstatus,
                    _isaccurate,
                ],
            )
            connection.commit()
            cur1.close()

        except:
            pass
    else:
        print(
            "INFO::: Season:"
            + str(_season)
            + ",race:"
            + str(_race)
            + ",racetype:"
            + _racetype
            + ",lapnumber:"
            + str(_lapnumber)
            + ","
            + _team
            + ","
            + _driver
            + " already exists in database, skipping!!"
        )


def insert_weather_row(connection, line, row):
    """
    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    Author: Ulf Hellstrom, oraminute@gmail.com
    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    """
    sql_stmt = """
insert into f1_data.f1_official_weather
values (:year
    ,:race
    ,:racetype
    ,:datapoint
    ,:time
    ,:airtemp
    ,:humidity
    ,:pressure
    ,:rainfall
    ,:tracktemp
    ,:winddirection
    ,:windspeed)
    """

    print("Trying to load row:" + str(row))

    # Split up comma separated rows into columns and cleanup/fix correct
    # atatypes and cleanup missing values.

    chunks = line.split(",")
    _year = int(empty_to_int(chunks[0]))
    _race = int(empty_to_int(chunks[1]))
    _racetype = chunks[2]
    _datapoint = int(empty_to_int(chunks[3]))
    _time = chunks[4]
    _airtemp = float(empty_to_float(chunks[5]))
    _humidity = float(empty_to_float(chunks[6]))
    _pressure = float(empty_to_float(chunks[7]))
    _rainfall = chunks[8]
    _tracktemp = float(empty_to_float(chunks[9]))
    _winddirection = int(empty_to_int(chunks[10]))
    _windspeed = float(empty_to_float(chunks[11]))

    # If data not already loaded into database insert the row!
    if not check_weatherdata_already_loaded(
        connection, _year, _race, _racetype, _datapoint
    ):

        # A very few rows might have very corrupt data.. We try to pass those few lines.
        # That's why the very stupid except pass until I figure out something better.
        try:
            print("ROWDATA::::::::::::::")
            print("=====================")
            print("season:" + str(_year))
            print("race:" + str(_race))
            print("racetype:" + _racetype)
            print("datapoint:" + str(_datapoint))
            print("time:" + _time)
            print("airtemp:" + str(_airtemp))
            print("humidity:" + str(_humidity))
            print("pressure:" + str(_pressure))
            print("rainfall:" + _rainfall)
            print("tracktemp:" + str(_tracktemp))
            print("winddirection:" + str(_winddirection))
            print("windspeed:" + str(_windspeed))

            cur1 = connection.cursor()
            cur1.execute(
                sql_stmt,
                [
                    _year,
                    _race,
                    _racetype,
                    _datapoint,
                    _time,
                    _airtemp,
                    _humidity,
                    _pressure,
                    _rainfall,
                    _tracktemp,
                    _winddirection,
                    _windspeed,
                ],
            )

            connection.commit()
            cur1.close()

        except:
            pass
    else:
        print(
            "INFO::: Season:"
            + str(_year)
            + ",race:"
            + str(_race)
            + ",racetype:"
            + _racetype
            + ",datappint:"
            + str(_datapoint)
            + " already exists in database, skipping!!"
        )

def check_airtemp_in_list(lst):
    return any("AirTemp" in s for s in lst)

def csv_to_database(connection, filename):
    """
    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    Author: Ulf Hellstrom, oraminute@gmail.com
    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    """
    print("Working on file:" + filename)
    print("::::::::::::::::::::::::::::")
    if only_empty_lines(filename):
        print("File " + filename + "is empty! Nothing to load")
    else:
        data_file = open(filename, "r")
        rows = data_file.readlines()
        count = 0
        for line in rows:
            count += 1
            if count > 1:
                match = re.findall("weather", filename)
                if match:
                    insert_weather_row(connection, line, count)
                else:
                    insert_data_row(connection, line, count)
        data_file.close()

    # Rename file we have loaded into database already
    new_file_name = filename + "_loaded"
    os.rename(filename, new_file_name)


def get_f1_header_columns(tmp_file):
    """
    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    Author: Ulf Hellstrom, oraminute@gmail.com
    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    """

    """Load csv file and get the headers from the header row"""
    with open(tmp_file, "r") as f:
        header = f.readline().strip()
        columns = header.split(",")
        return columns


def get_f1_data_lines(tmp_file):
    """
    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    Author: Ulf Hellstrom, oraminute@gmail.com
    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    """

    """Get the comma separated data"""
    with open(tmp_file, "r") as f:
        header = f.readline()
        lines = f.readlines()
        return lines


def sort_header_list(lst):
    """
    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    Author: Ulf Hellstrom, oraminute@gmail.com
    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    """

    order = [
        "Year",
        "Race",
        "Racetype",
        "Datapoint",
        "Time",
        "DriverNumber",
        "LapTime",
        "LapNumber",
        "Stint",
        "PitOutTime",
        "PitInTime",
        "Sector1Time",
        "Sector2Time",
        "Sector3Time",
        "Sector1SessionTime",
        "Sector2SessionTime",
        "Sector3SessionTime",
        "SpeedI1",
        "SpeedI2",
        "SpeedFL",
        "SpeedST",
        "IsPersonalBest",
        "Compound",
        "TyreLife",
        "FreshTyre",
        "LapStartTime",
        "Team",
        "Driver",
        "TrackStatus",
        "IsAccurate",
        "LapStartDate",
    ]
    sorted_lst = sorted(lst, key=lambda x: order.index(x))
    return ",".join(sorted_lst)


def get_f1_data_row_values(data_lines, headers):
    """
    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    Author: Ulf Hellstrom, oraminute@gmail.com
    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    """
    row_values = []
    for line in data_lines:
        if line.strip():  # check if line is not empty
            values = line.strip().split(",")
            for i in range(len(headers)):
                row_values.append(headers[i])
                row_values.append(values[i])
    return row_values


def fix_f1_telemetry_data_file(year, race, racetype):
    """
    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    Author: Ulf Hellstrom, oraminute@gmail.com
    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    """
    finale_filename = str(year) + "_" + str(race) + "_" + racetype + "_f1.csv"

    # Cleanup data so we can load it into a oracle database

    # open your csv and read as a text string

    if file_exists(workingdir + "/data.csv"):

        print("DEBUG: datafile genereated from f1data api...")
        with open("data.csv", "r") as infile:
            my_csv_text = infile.read()

        find_str = "0 days "
        replace_str = ""

        # substitute
        new_csv_str = re.sub(find_str, replace_str, my_csv_text)
        # open new file and save
        new_csv_path = workingdir + "/temp.csv"  # or whatever path and name you want
        with open(new_csv_path, "w") as outfile:
            outfile.write(new_csv_str)
    else:
        print(
            "DEBUG: f1data api did not generate any data.csv, probaly due to missing or corrupt data...."
        )

    # Write a new file based on temp.csv with additional info

    if file_exists(workingdir + "/" + "temp.csv"):

        middle_csv_file = open(workingdir + "/" + "middlefile.csv", "w")

        # read temp.csv file and add season and race and type (Qualification or Race)

        temp_file = open(workingdir + "/" + "temp.csv", "r")
        rows = temp_file.readlines()

        count = 0
        for line in rows:
            count += 1
            if count < 2:
                new_line = "Year,Race,Racetype,Datapoint" + line
                middle_csv_file.write(new_line)
            if count > 1:
                new_line = str(year) + "," + str(race) + "," + racetype + "," + line
                middle_csv_file.write(new_line)

        middle_csv_file.close()
        temp_file.close()

        # Write the final where headers and data are sorted in correct order as per db table.
        print("DEBUG: WORKING WITH MIDDLEFILE PRODUCING FINAL FILE")
        print("***************************************************")
        header_columns = get_f1_header_columns(workingdir + "/" + "middlefile.csv")
        print("DEBUG: AFTER get_f1_header_columns")
        sorted_header_columns = sort_header_list(header_columns)
        print("DEBUG: AFTER sort_header_list")
        print("DEBUG: SORTED HEADERS: " + sorted_header_columns)
        print("***************************************************")
        print("DEBUG: READING DATALINES")
        print("***************************************************")
        data_lines = get_f1_data_lines(workingdir + "/" + "middlefile.csv")
        print("DEBUG: FINAL FILENAME: " + workingdir + "/" + finale_filename)
        with open(workingdir + "/" + finale_filename, "w") as f:
            f.write(sorted_header_columns + "\n")
            for i in range(len(data_lines)):
                row_values = get_f1_data_row_values([data_lines[i]], header_columns)
                sorted_row_values = []
                # Always sort the data in same order as the table columes in the database.
                for j in [
                    "Year",
                    "Race",
                    "Racetype",
                    "Datapoint",
                    "Time",
                    "DriverNumber",
                    "LapTime",
                    "LapNumber",
                    "Stint",
                    "PitOutTime",
                    "PitInTime",
                    "Sector1Time",
                    "Sector2Time",
                    "Sector3Time",
                    "Sector1SessionTime",
                    "Sector2SessionTime",
                    "Sector3SessionTime",
                    "SpeedI1",
                    "SpeedI2",
                    "SpeedFL",
                    "SpeedST",
                    "IsPersonalBest",
                    "Compound",
                    "TyreLife",
                    "FreshTyre",
                    "LapStartTime",
                    "Team",
                    "Driver",
                    "TrackStatus",
                    "IsAccurate",
                    "LapStartDate",
                ]:
                    for k in range(len(row_values)):
                        if row_values[k] == j:
                            sorted_row_values.append(row_values[k + 1])

                f.write(",".join(sorted_row_values) + "\n")

        remove_file(workingdir + "/data.csv")
        remove_file(workingdir + "/temp.csv")

    else:
        print("DEBUG: no temp.csv generated from f1data api")


def gen_f1_telemetry_data_file(year, race, racetype):
    """
    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    Author: Ulf Hellstrom, oraminute@gmail.com
    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    """

    # Enable the cache and fetch the qualification timings for this race

    try:

        ff1.Cache.enable_cache("cache")
        telemetry = ff1.get_session(int(year), int(race), racetype)
        laps = telemetry.load_laps(with_telemetry=True)

        laps.to_csv("data.csv")

        # Cleanup data so we can load it into a oracle database

        # open your csv and read as a text string
        with open("data.csv", "r") as infile:
            my_csv_text = infile.read()

        find_str = "0 days "
        replace_str = ""

        # substitute
        new_csv_str = re.sub(find_str, replace_str, my_csv_text)

        # open new file and save
        new_csv_path = "temp.csv"  # or whatever path and name you want
        with open(new_csv_path, "w") as outfile:
            outfile.write(new_csv_str)

    except:
        pass


def gen_f1_weather_data_file(year, race, racetype):
    """
    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    Author: Ulf Hellstrom, oraminute@gmail.com
    Load weather data for current session.
    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    """
    filename = str(year) + "_" + str(race) + "_" + racetype + "_weather_f1.csv"

    # Enable the cache and fetch the qualification timings for this race

    try:

        ff1.Cache.enable_cache("cache")

        session = ff1.get_session(int(year), int(race), racetype)
        session.load()
        weather = session.weather_data
        weather.to_csv("data.csv")

        # Cleanup data so we can load it into a oracle database

        # open your csv and read as a text string
        with open("data.csv", "r") as infile:
            my_csv_text = infile.read()

        find_str = "0 days "
        replace_str = ""

        # substitute
        new_csv_str = re.sub(find_str, replace_str, my_csv_text)

        # open new file and save
        new_csv_path = "temp.csv"  # or whatever path and name you want
        with open(new_csv_path, "w") as outfile:
            outfile.write(new_csv_str)

        # Write a new file based on temp.csv with additional info

        final_csv_file = open(filename, "w")

        # read temp.csv file and add season and race and type (Qualification or Race)

        temp_file = open("temp.csv", "r")
        rows = temp_file.readlines()

        count = 0
        for line in rows:
            count += 1
            if count < 2:
                new_line = "Year,Race,Racetype,Datapoint" + line
                final_csv_file.write(new_line)
            if count > 1:
                new_line = str(year) + "," + str(race) + "," + racetype + "," + line
                final_csv_file.write(new_line)

        final_csv_file.close()
        temp_file.close()

    except:
        pass


def main():
    """
    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    Main starts here. Eg this is where we run the code
    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    """
    counter = 0

    # Set run_rest TO False to only load csv files without
    # trying to call F1 and Ergast REST services.

    if len(sys.argv) > 1:
        print("Only loading not processed csv files!")
        run_rest = False
    else:
        print("Will try to get data from ergast and F1 telemetry..")
        run_rest = True

    # Give the hostname or scan-listener
    tns = input("Please enter hostname or scan-listener name: ")
    # Get the TNS name
    dbname = input("Enter the TNS-Alias for DB to connect to: ")
    # Get oracle user name
    username = input("Oracle Username: ")
    # Get password and encrypt it
    pwd = getpass.getpass(prompt="Please give " + username + " password: ")
    pwd = base64.urlsafe_b64encode(pwd.encode("UTF-8)")).decode("ascii")
    os.environ["DB_INFO"] = pwd
    tnsport = input("Give Listener port default (1521): ")
    # Enable logging output to log file
    sys.stdout = Logger()
    if username.lower() == "sys":
        print("Trying to connect to " + username + "/xxxxx@" + dbname + " as sysdba")
    else:
        print("Trying to connect to " + username + "/xxxxx@" + dbname)
    db_pwd = base64.urlsafe_b64decode(os.environ["DB_INFO"].encode("UTF-8")).decode(
        "ascii"
    )
    connection = ora.get_oracle_connection(dbname, tns, tnsport, username, db_pwd)
    print("Connection successfull")
    print("Checking for F1_DATA.F1_OFFICIAL_TIMEDATA")
    time.sleep(2)
    if check_if_object_exists(connection):
        print("F1_DATA.F1_OFFICIAL_TIMEDATA exists")
    else:
        print("Missing F1_DATA.F1_OFFICIAL_TIMEDATA please install extra objects...")

    season_list = get_f1_seasons_and_races(connection)

    if run_rest is True:

        for val in season_list:
            year = ora.split_list(val, ",", 0)
            race = ora.split_list(val, ",", 1)
            racetype = "FP1"
            for racetype in ["FP1", "FP2", "FP3", "Q", "R"]:
                year, race = ora.split_list(val, ",", 0), ora.split_list(val, ",", 1)
                print(
                    f"Fetching F1 official telemetry data for: {year},{race},{racetype}"
                )
                if (
                    check_if_race_exists(connection, int(year), int(race), racetype)
                    is False
                ):
                    counter += 1
                    gen_f1_telemetry_data_file(year, race, racetype)
                    if file_exists(workingdir + "/" + "data.csv"):
                        header_columns = get_f1_header_columns(workingdir + "/" + "data.csv")
                        #check if data.csv is a telemetry of weather file
                        if ( 
                            check_airtemp_in_list(header_columns) is False
                        ):    
                            fix_f1_telemetry_data_file(year, race, racetype)
                else:
                    print(f"Data for {year} race {race} already exists skipping...")
                if (
                    check_if_weather_exists(connection, int(year), int(race), racetype)
                    is False
                ):
                    counter += 1
                    gen_f1_weather_data_file(year, race, racetype)
                else:
                    print(
                        f"Weather data for {year} race {race} already exists skipping..."
                    )
    file_list = get_csv_files()
    print("Loading data into the F1_DATA schema..")
    for filename in file_list:
        print(filename)
        csv_to_database(connection, filename)


if __name__ == "__main__":
    main()
